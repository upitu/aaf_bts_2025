name: Deploy Al Ain Dairy Back to School to Dev, Staging, and Main

on:
  push:
    branches:
      - dev
  pull_request:
    types: [closed] # Run when a PR is merged
    branches:
      - staging
      - main

jobs:
  # =================================================================
  # ==                DEPLOY TO DEVELOPMENT                        ==
  # =================================================================
  deploy-dev:
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:dev

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:dev

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            # Navigate to your project directory on the server
            cd /opt/aaf/dev

            # Create the .env file from the GitHub secret
            echo "${{ secrets.DEV_ENV_FILE }}" > .env

            # Pull the latest images and restart the services
            docker-compose pull
            docker-compose up -d --build

  # =================================================================
  # ==                DEPLOY TO STAGING                            ==
  # =================================================================
  deploy-staging:
    if: github.event.pull_request.merged == true && github.base_ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:staging

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:staging

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Navigate to your project directory on the server
            cd /opt/aaf/staging

            # Create the .env file from the GitHub secret
            echo "${{ secrets.STAGING_ENV_FILE }}" > .env

            # Pull the latest images and restart the services
            docker-compose pull
            docker-compose up -d --build

  # =================================================================
  # ==                DEPLOY TO MAIN (PRODUCTION)                  ==
  # =================================================================
  deploy-main:
    if: github.event.pull_request.merged == true && github.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug SSH Connection
        run: |
          # Create a directory for the SSH key
          mkdir -p ~/.ssh/
          
          # Write the private key from the GitHub secret to a file
          echo "${{ secrets.DEV_SSH_KEY }}" > ~/.ssh/github_key
          
          # Set the correct, strict permissions on the key file
          chmod 600 ~/.ssh/github_key
          
          # Add the server's host key to known_hosts to avoid interactive prompts
          ssh-keyscan -H "${{ secrets.DEV_SSH_HOST }}" >> ~/.ssh/known_hosts
          
          # Attempt the SSH connection with verbose output (-v) and non-interactive mode (-T)
          # This will print the detailed connection log
          ssh -v -T -i ~/.ssh/github_key ${{ secrets.DEV_SSH_USERNAME }}@${{ secrets.DEV_SSH_HOST }} "echo 'Connection successful!'"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:main

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:main

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MAIN_SSH_HOST }}
          username: ${{ secrets.MAIN_SSH_USERNAME }}
          key: ${{ secrets.MAIN_SSH_KEY }}
          script: |
            # Navigate to your project directory on the server
            cd /opt/aaf/main

            # Create the .env file from the GitHub secret
            echo "${{ secrets.MAIN_ENV_FILE }}" > .env

            # Pull the latest images and restart the services
            docker-compose pull
            docker-compose up -d --build
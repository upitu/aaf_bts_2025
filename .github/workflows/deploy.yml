name: Deploy to Dev, Staging, and Main

on:
  push:
    branches:
      - dev
  pull_request:
    types: [closed] # Run when a PR is merged
    branches:
      - staging
      - main

jobs:
  # =================================================================
  # ==           DEBUGGING DEPLOY TO DEVELOPMENT                   ==
  # =================================================================
  deploy-dev:
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:dev

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:dev

      - name: Deploy and Debug on Server
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEV_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add server to known hosts
          ssh-keyscan -H "${{ secrets.DEV_SSH_HOST }}" >> ~/.ssh/known_hosts
          
          # Execute debug and deployment script on the server
          ssh -T -i ~/.ssh/deploy_key ${{ secrets.DEV_SSH_USERNAME }}@${{ secrets.DEV_SSH_HOST }} << 'EOF'
            echo "--- Checking server-side shell startup scripts ---"
            cat ~/.bashrc || echo ".bashrc not found or unreadable"
            echo "---"
            cat ~/.profile || echo ".profile not found or unreadable"
            echo "---"
            cat ~/.bash_profile || echo ".bash_profile not found or unreadable"
            echo "---"
            cat ~/.bash_login || echo ".bash_login not found or unreadable"
            echo "--- Finished checking profiles. Now running deployment. ---"

            # Navigate to your project directory on the server
            cd /opt/aaf/dev

            # Create the .env file from the GitHub secret
            echo "${{ secrets.DEV_ENV_FILE }}" > .env

            # Pull the latest images and restart the services
            docker-compose pull
            docker-compose up -d --build
          EOF

  # =================================================================
  # ==                DEPLOY TO STAGING                            ==
  # =================================================================
  deploy-staging:
    if: github.event.pull_request.merged == true && github.base_ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:staging

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:staging

      - name: Deploy to server via SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.STAGING_SSH_HOST }}" >> ~/.ssh/known_hosts
          ssh -T -i ~/.ssh/deploy_key ${{ secrets.STAGING_SSH_USERNAME }}@${{ secrets.STAGING_SSH_HOST }} << 'EOF'
            cd /opt/aaf/staging
            echo "${{ secrets.STAGING_ENV_FILE }}" > .env
            docker-compose pull
            docker-compose up -d --build
          EOF

  # =================================================================
  # ==                DEPLOY TO MAIN (PRODUCTION)                  ==
  # =================================================================
  deploy-main:
    if: github.event.pull_request.merged == true && github.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:main

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:main

      - name: Deploy to server via SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.MAIN_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.MAIN_SSH_HOST }}" >> ~/.ssh/known_hosts
          ssh -T -i ~/.ssh/deploy_key ${{ secrets.MAIN_SSH_USERNAME }}@${{ secrets.MAIN_SSH_HOST }} << 'EOF'
            cd /opt/aaf/main
            echo "${{ secrets.MAIN_ENV_FILE }}" > .env
            docker-compose pull
            docker-compose up -d --build
          EOF
